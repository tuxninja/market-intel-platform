name: Daily Market Intelligence Digest

on:
  # Run at 6:30 AM Arizona Time (13:30 UTC) Monday-Friday
  schedule:
    # 30 minutes before main trading analysis for morning news brief
    - cron: '30 13 * * 1-5'
  workflow_dispatch:
    inputs:
      max_items:
        description: 'Maximum digest items (default: 20)'
        required: false
        default: '20'
        type: string
      hours_lookback:
        description: 'Hours to look back for news (default: 24)'
        required: false
        default: '24'
        type: string
      recipient_email:
        description: 'Override recipient email (optional)'
        required: false
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: market-intel-backend
  ECS_CLUSTER: market-intel-cluster
  ECS_TASK_DEFINITION: market-intel-task

jobs:
  daily-digest:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get AWS Account ID and VPC Info
      id: aws-info
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

        # Get default VPC and subnet
        VPC_ID=$(aws ec2 describe-vpcs --filters Name=is-default,Values=true --query 'Vpcs[0].VpcId' --output text)
        SUBNET_ID=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$VPC_ID --query 'Subnets[0].SubnetId' --output text)

        echo "vpc-id=$VPC_ID" >> $GITHUB_OUTPUT
        echo "subnet-id=$SUBNET_ID" >> $GITHUB_OUTPUT

        echo "Account ID: $ACCOUNT_ID"
        echo "VPC ID: $VPC_ID"
        echo "Subnet ID: $SUBNET_ID"

    - name: Get or create security group
      id: security-group
      run: |
        # Try to find existing security group
        SG_ID=$(aws ec2 describe-security-groups \
          --filters Name=group-name,Values=market-intel-sg \
          --query 'SecurityGroups[0].GroupId' \
          --output text 2>/dev/null || echo "None")

        if [[ "$SG_ID" == "None" ]]; then
          echo "Creating security group..."
          SG_ID=$(aws ec2 create-security-group \
            --group-name market-intel-sg \
            --description "Market Intelligence Platform security group" \
            --vpc-id ${{ steps.aws-info.outputs.vpc-id }} \
            --query 'GroupId' \
            --output text)

          # Add outbound HTTPS rule for API calls
          aws ec2 authorize-security-group-egress \
            --group-id $SG_ID \
            --protocol tcp \
            --port 443 \
            --cidr 0.0.0.0/0

          # Add outbound HTTP rule
          aws ec2 authorize-security-group-egress \
            --group-id $SG_ID \
            --protocol tcp \
            --port 80 \
            --cidr 0.0.0.0/0

          # Add outbound SMTP rule for email
          aws ec2 authorize-security-group-egress \
            --group-id $SG_ID \
            --protocol tcp \
            --port 587 \
            --cidr 0.0.0.0/0

          echo "✅ Security group created: $SG_ID"
        else
          echo "✅ Using existing security group: $SG_ID"
        fi

        echo "security-group-id=$SG_ID" >> $GITHUB_OUTPUT

    - name: Get latest task definition
      id: task-def
      run: |
        TASK_DEF_ARN=$(aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)

        echo "task-definition-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
        echo "Latest task definition: $TASK_DEF_ARN"

    - name: Run daily digest task
      id: run-task
      run: |
        echo "📰 Running daily market intelligence digest at 6:30 AM Arizona Time"

        # Determine recipient email
        RECIPIENT_EMAIL="${{ github.event.inputs.recipient_email }}"
        if [[ -z "$RECIPIENT_EMAIL" ]]; then
          RECIPIENT_EMAIL="${{ secrets.DIGEST_RECIPIENT_EMAIL }}"
        fi

        # Build command array for digest mode
        COMMAND_ARGS=("python" "scripts/send_daily_digest.py" "--email" "$RECIPIENT_EMAIL")

        # Add optional parameters if provided via manual trigger
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ -n "${{ github.event.inputs.max_items }}" && "${{ github.event.inputs.max_items }}" != "20" ]]; then
            COMMAND_ARGS+=("--max-items" "${{ github.event.inputs.max_items }}")
          fi

          if [[ -n "${{ github.event.inputs.hours_lookback }}" && "${{ github.event.inputs.hours_lookback }}" != "24" ]]; then
            COMMAND_ARGS+=("--hours-lookback" "${{ github.event.inputs.hours_lookback }}")
          fi
        fi

        # Convert array to JSON format for AWS CLI
        COMMAND_JSON=$(printf '"%s",' "${COMMAND_ARGS[@]}")
        COMMAND_JSON="[${COMMAND_JSON%,}]"

        echo "Running digest with command: ${COMMAND_ARGS[*]}"

        # Run the digest task
        TASK_ARN=$(aws ecs run-task \
          --cluster ${{ env.ECS_CLUSTER }} \
          --task-definition ${{ steps.task-def.outputs.task-definition-arn }} \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ steps.aws-info.outputs.subnet-id }}],securityGroups=[${{ steps.security-group.outputs.security-group-id }}],assignPublicIp=ENABLED}" \
          --overrides "{\"containerOverrides\":[{\"name\":\"market-intel-container\",\"command\":$COMMAND_JSON}]}" \
          --query 'tasks[0].taskArn' \
          --output text)

        echo "task-arn=$TASK_ARN" >> $GITHUB_OUTPUT
        echo "✅ Daily digest task started: $TASK_ARN"

    - name: Wait for task completion
      run: |
        TASK_ARN=${{ steps.run-task.outputs.task-arn }}
        echo "Waiting for digest task to complete: $TASK_ARN"

        # Wait up to 8 minutes for completion (digest is faster than full analysis)
        for i in {1..48}; do
          STATUS=$(aws ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --tasks $TASK_ARN \
            --query 'tasks[0].lastStatus' \
            --output text)

          echo "Attempt $i: Task status = $STATUS"

          if [[ "$STATUS" == "STOPPED" ]]; then
            # Get exit code
            EXIT_CODE=$(aws ecs describe-tasks \
              --cluster ${{ env.ECS_CLUSTER }} \
              --tasks $TASK_ARN \
              --query 'tasks[0].containers[0].exitCode' \
              --output text)

            echo "Digest task completed with exit code: $EXIT_CODE"

            if [[ "$EXIT_CODE" == "0" ]]; then
              echo "✅ Daily intelligence digest completed successfully!"
              echo "📰 Market intelligence digest email delivered"
            else
              echo "❌ Daily digest failed with exit code: $EXIT_CODE"
              exit 1
            fi
            break
          fi

          if [[ $i -eq 48 ]]; then
            echo "❌ Digest task did not complete within 8 minutes"
            exit 1
          fi

          sleep 10
        done

    - name: Get task logs
      if: always()
      run: |
        TASK_ARN=${{ steps.run-task.outputs.task-arn }}
        TASK_ID=$(basename $TASK_ARN)

        echo "Getting digest logs for task: $TASK_ID"

        # Get logs (last 30 lines)
        aws logs get-log-events \
          --log-group-name "/ecs/market-intel" \
          --log-stream-name "ecs/market-intel-container/$TASK_ID" \
          --query 'events[-30:].message' \
          --output text || echo "No logs available yet"

    - name: Display completion summary
      if: success()
      run: |
        echo "🎉 Daily market intelligence digest completed successfully!"
        echo ""
        echo "📰 Daily digest email sent to configured recipient"
        echo "⏰ Digest covered last 24 hours of financial news"
        echo "🔍 Includes trading insights:"
        echo "   🟢 BULLISH SIGNALS - Positive catalysts"
        echo "   🔴 BEARISH SIGNALS - Negative catalysts"
        echo "   ⚪ NEUTRAL SIGNALS - Watch for direction"
        echo "📊 Market regime and VIX info included"
        echo ""
        echo "🕰️ Main trading analysis follows at 7:00 AM Arizona Time"
        echo "📅 Next digest: Tomorrow at 6:30 AM Arizona Time"

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Daily intelligence digest failed!"
        echo "📧 No digest email sent today"
        echo "🔧 Check logs above for error details"
        echo ""
        echo "Common issues:"
        echo "  - Network connectivity problems"
        echo "  - Email configuration issues"
        echo "  - RSS feed parsing errors"
        echo "  - AWS resource constraints"
